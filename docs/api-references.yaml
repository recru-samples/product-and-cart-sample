openapi: 3.0.2
info:
  title: ''
  version: 0.0.0
paths:
  /api/carts:
    get:
      tags:
        - Cart
      operationId: getCartCollection
      summary: 'Retrieves the collection of Cart resources.'
      responses:
        200:
          description: 'Cart collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Cart:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Cart
      operationId: postCartCollection
      summary: 'Creates a Cart resource.'
      responses:
        201:
          description: 'Cart resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Cart:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
            text/html:
              schema:
                $ref: '#/components/schemas/Cart'
          links:
            GetCartItem:
              parameters:
                id: '$response.body#/id'
              operationId: getCartItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/carts/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Cart:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          text/html:
            schema:
              $ref: '#/components/schemas/Cart'
        description: 'The new Cart resource'
  '/api/carts/{id}':
    get:
      tags:
        - Cart
      operationId: getCartItem
      summary: 'Retrieves a Cart resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Cart resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Cart:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
            text/html:
              schema:
                $ref: '#/components/schemas/Cart'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Cart
      operationId: deleteCartItem
      summary: 'Removes the Cart resource.'
      responses:
        204:
          description: 'Cart resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Cart
      operationId: putCartItem
      summary: 'Replaces the Cart resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Cart resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Cart:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
            text/html:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Cart:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          text/html:
            schema:
              $ref: '#/components/schemas/Cart'
        description: 'The updated Cart resource'
    patch:
      tags:
        - Cart
      operationId: patchCartItem
      summary: 'Updates the Cart resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Cart resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Cart:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
            text/html:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Cart'
        description: 'The updated Cart resource'
  /api/products:
    get:
      tags:
        - Product
      operationId: getProductCollection
      summary: 'Retrieves the collection of Product resources.'
      responses:
        200:
          description: 'Product collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Product:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Product
      operationId: postProductCollection
      summary: 'Creates a Product resource.'
      responses:
        201:
          description: 'Product resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
          links:
            GetProductItem:
              parameters:
                id: '$response.body#/id'
              operationId: getProductItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/products/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Product:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/html:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'The new Product resource'
  '/api/products/{id}':
    get:
      tags:
        - Product
      operationId: getProductItem
      summary: 'Retrieves a Product resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Product resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Product
      operationId: deleteProductItem
      summary: 'Removes the Product resource.'
      responses:
        204:
          description: 'Product resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Product
      operationId: putProductItem
      summary: 'Replaces the Product resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Product resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Product:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/html:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'The updated Product resource'
    patch:
      tags:
        - Product
      operationId: patchProductItem
      summary: 'Updates the Product resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Product resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'The updated Product resource'
components:
  schemas:
    Cart:
      type: object
      description: ''
      properties:
        id:
          readOnly: true
          type: integer
        payer:
          type: string
        product:
          type: array
          items:
            type: string
            format: iri-reference
        createdAt:
          type: string
          format: date-time
        orderedAt:
          type: string
          format: date-time
          nullable: true
    'Cart:jsonld':
      type: object
      description: ''
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          type: integer
        payer:
          type: string
        product:
          type: array
          items:
            type: string
            format: iri-reference
        createdAt:
          type: string
          format: date-time
        orderedAt:
          type: string
          format: date-time
          nullable: true
    Product:
      type: object
      description: ''
      properties:
        id:
          readOnly: true
          type: integer
        name:
          type: string
        price:
          type: integer
        currency:
          type: string
    'Product:jsonld':
      type: object
      description: ''
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          type: integer
        name:
          type: string
        price:
          type: integer
        currency:
          type: string
